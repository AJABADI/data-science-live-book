print(ptm)
ptm = proc.time()
ptm <- proc.time()
print(ptm)
as.data.frame(print(ptm))
print(ptm)
as.character(print(ptm))
as.character(ptm)[1:3]
df_times=(c("user", "system", "elapsed"), as.data.frame(as.character(ptm)[1:3]))
df_times=data.frame(c("user", "system", "elapsed"), as.data.frame(as.character(ptm)[1:3]))
df_times
df_times=data.frame(var=c("user", "system", "elapsed"), times=as.character(ptm)[1:3])
df_times
ptm = proc.time()
ptm <- proc.time()
ptm
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:5000) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:50000) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:50000) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:50000) mad(stats::runif(500))
proc.time() - ptm
ptm <- proc.time()
for (i in 1:50000) mad(stats::runif(500))
proc.time() - ptm
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
library(funModeling)
suppressMessages(library(funModeling))
data(heart_disease)
get_sample <- function(n)
{
set.seed(10)
tr=sample(nrow(heart_disease), n)
return(tr)
}
## Training and test data
data_tr=heart_disease[get_sample(220),]
data_ts=heart_disease[-get_sample(220),]
## Creating the model only with training data
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
suppressMessages(library(funModeling))
data(heart_disease)
suppressMessages(library(funModeling))
data(heart_disease)
get_sample <- function(n)
{
set.seed(10)
tr=sample(nrow(heart_disease), n)
return(tr)
}
## Training and test data
data_tr=heart_disease[get_sample(220),]
data_ts=heart_disease[-get_sample(220),]
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
fit_rf
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
suppressMessages(library(funModeling))
data(heart_disease)
get_sample <- function(n)
{
set.seed(10)
tr=sample(nrow(heart_disease), n)
return(tr)
}
## Training and test data
data_tr=heart_disease[get_sample(220),]
data_ts=heart_disease[-get_sample(220),]
## Creating the model only with training data
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
get_sample <- function(n)
{
set.seed(40)
tr=sample(nrow(heart_disease), n)
return(tr)
}
## Training and test data
data_tr=heart_disease[get_sample(220),]
data_ts=heart_disease[-get_sample(220),]
## Creating the model only with training data
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
data_tr=heart_disease[get_sample(200),]
data_ts=heart_disease[-get_sample(200),]
## Creating the model only with training data
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
get_sample <- function(n)
{
set.seed(999)
tr=sample(nrow(heart_disease), n)
return(tr)
}
## Training and test data
data_tr=heart_disease[get_sample(250),]
data_ts=heart_disease[-get_sample(250),]
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr,ntree=500)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
data_tr=heart_disease[get_sample(270),]
data_ts=heart_disease[-get_sample(270),]
## Creating the model only with training data
suppressMessages(library(randomForest))
fit_rf=randomForest(as.factor(has_heart_disease) ~ age + oldpeak, data=data_tr,ntree=500)
model_performance(fit=fit_rf, data = data_tr, target_var = "has_heart_disease")
## Perfomance metrics for Test Data
model_performance(fit=fit_rf, data = data_ts, target_var = "has_heart_disease")
require(installr)
# The first two functions might take a good deal of time to run (depending on the date range)
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2016-01-07', END = '2016-01-09') # around the time R 3.0.0 was released
RStudio_CRAN_data_folder
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2016-01-07', END = '2016-01-09') # around the time R 3.0.0 was released
barplot_package_users_per_day("funModeling", my_RStudio_CRAN_data)
my_RStudio_CRAN_data <- read_RStudio_CRAN_data(RStudio_CRAN_data_folder)
barplot_package_users_per_day("funModeling", my_RStudio_CRAN_data)
my_RStudio_CRAN_data
library(dplyr)
a=filter(my_RStudio_CRAN_data, package=="funModeling")
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2016-02-07', END = '2016-02-09') # around the time R 3.0.0 was released
my_RStudio_CRAN_data <- read_RStudio_CRAN_data(RStudio_CRAN_data_folder)
barplot_package_users_per_day("funModeling", my_RStudio_CRAN_data)
a=filter(my_RStudio_CRAN_data, package=="funModeling")
source('~/repos/package installations.R', echo=TRUE)
barplot_package_users_per_day("funModeling", my_RStudio_CRAN_data)
help(cross)
help(cross_plot)
??cross_plot
setwd("~/repos/analytics-user-flow")
rm(list=ls());cat("\014");graphics.off();
cat("\n\n")
print("------ BEGIN PROCESS 01 ------ ")
cat("\n\n")
source("lib.R")
config_file=read.delim("config.txt", header = T)
end_date=as.Date(as.character(subset(config_file,config_file$parameter=="end_date")$value),  format="%Y-%m-%d")
## Lectura inicial
d_pv_hr=get_prep_pg(end_date, IS_SAMPLE = F)
a=filter(d_pv_hr, category_url=='other')
a=filter(d_pv_hr, category_url_final=='other')
c=get_category_freq(dm_urls_by_hr, 'url')
b=group_by(a, url) %>% summarise(q=n(), p=round(n()/nrow(.),3))
View(b)
url_cat_custom=read.delim(file='url-landing-custom.txt', header = T, stringsAsFactors=F, sep=';') %>% select(url, category_url_custom, category_url_custom_2)
url_cat_custom=read.delim(file='url-landing-custom.txt', header = T, stringsAsFactors=F, sep=';') %>% select(url, category_url_custom, category_url_custom_2)
url_cat_custom=read.delim(file='url-landing-custom.txt', header = T, stringsAsFactors=F)
url_cat_custom
url_cat_custom=read.delim(file='url-landing-custom.txt', header = T, stringsAsFactors=F) %>% select(url, category_url_custom, category_url_custom_2)
View(url_cat_custom)
landing_groups <- read.delim("url-landing.txt", header = TRUE, stringsAsFactors = F) %>% select(Category, Category_2)
landing_groups
View(landing_groups)
url_dist=get_category_freq(d_pv_hr, 'category_url_final')
url_dist
View(url_dist)
d_pv_hr=filter(d_pv_hr, !(category_url_final %in% c('EXCLUDE', 'releases','press', 'Events Landing','aws_reinvent')))
## url distribution
url_dist=get_category_freq(d_pv_hr, 'category_url_final')
url_dist
setwd("~/repos/data-science-live-book")
library(knitr)
name='scoring'
folder='scoring'
knit(sprintf("%s/%s.Rmd", folder, name), sprintf("%s.md", name))
knit2html(sprintf("%s/%s.Rmd", folder, name), sprintf("%s/%s.html", folder, name));file.remove(sprintf("%s.md", name))
library(knitr)
create_files <- function(name, folder)
{
knit(sprintf("%s/%s.Rmd", folder, name), sprintf("%s.md", name))
knit2html(sprintf("%s/%s.Rmd", folder, name), sprintf("%s/%s.html", folder, name));file.remove(sprintf("%s.md", name))
}
create_files('scoring', 'scoring')
create_files('gain_lift', 'model_performance')
create_files('introduction', 'model_performance')
??ffreq
help(freq)
create_files('scoring', 'scoring')
create_files('gain_lift', 'model_performance')
create_files('introduction', 'model_performance')
create_files('profiling', 'data_preparation')
create_files('profiling', 'data_preparation')
create_files('profiling', 'data_preparation')
